generator client {
  provider = "prisma-client-js"
  binaryTargets = ["native", "linux-musl-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


model User {
  id            String    @id @default(uuid())
  firstName     String
  lastName      String
  password      String
  verified      Boolean   @default(false)
  session_token String    @default("-1")
  profilePic    String    @default("")
  email         String?   @unique
  createdAt     DateTime  @default(now())
  otp           String?
  otpExpires    DateTime?
  privacyLevel  Int @default(0) // 0: public, 1: friends, 2: private
  privateFName  String
  privateLName  String

  // Relations
  routes        Route[]
  ownedRides    Ride[]    @relation("RideOwner")
  ridesMember   Ride[]    @relation("RideMembers")
  sentMessages  Message[]
}

model Route {
  id            String   @id @default(uuid())
  creatorId     String
  
  // Place information
  startPlaceName String
  endPlaceName   String
  startLat       Float
  startLon       Float
  endLat         Float
  endLon         Float
  distance       Float
  
  // Relations
  creator        User     @relation(fields: [creatorId], references: [id], onDelete: Cascade)
  primaryForRide Ride?    @relation("PrimaryRoute")
  memberOfRide   Ride?    @relation("MemberRoutes", fields: [memberRideId], references: [id], onDelete: SetNull)
  memberRideId   String?
}

model Ride {
  id              String   @id @default(uuid())
  primaryRouteId  String?  @unique  // One primary route per ride
  ownerId         String
  start           DateTime
  totalCost       Float
  createdAt       DateTime @default(now())
  
  // Relations
  owner           User     @relation("RideOwner", fields: [ownerId], references: [id], onDelete: Cascade)
  primaryRoute    Route?   @relation("PrimaryRoute", fields: [primaryRouteId], references: [id])
  members         User[]   @relation("RideMembers")
  memberRoutes    Route[]  @relation("MemberRoutes")
  messages        Message[]
}

model Message {
  id         String   @id @default(uuid())
  content    String
  senderId   String
  rideId     String
  sentAt     DateTime @default(now())
  
  // Relations
  sender     User     @relation(fields: [senderId], references: [id], onDelete: Cascade)
  ride       Ride     @relation(fields: [rideId], references: [id], onDelete: Cascade)
  
  @@index([rideId])
}
